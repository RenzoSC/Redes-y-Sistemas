//
// Generated file, do not edit! Created by opp_msgtool 6.0 from hello.msg.
//

#ifndef __HELLO_M_H
#define __HELLO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Hello;
#include "packet_m.h" // import packet

/**
 * Class generated from <tt>hello.msg:3</tt> by opp_msgtool.
 * <pre>
 * packet Hello extends Packet
 * {
 *     int gateIndexFrom;
 *     int gateIndex[];
 *     int neighbours[];
 *     int neighName;
 *     int countRound;
 *     int originalSource;
 * }
 * </pre>
 */
class Hello : public ::Packet
{
  protected:
    int gateIndexFrom = 0;
    int *gateIndex = nullptr;
    size_t gateIndex_arraysize = 0;
    int *neighbours = nullptr;
    size_t neighbours_arraysize = 0;
    int neighName = 0;
    int countRound = 0;
    int originalSource = 0;

  private:
    void copy(const Hello& other);

  protected:
    bool operator==(const Hello&) = delete;

  public:
    Hello(const char *name=nullptr, short kind=0);
    Hello(const Hello& other);
    virtual ~Hello();
    Hello& operator=(const Hello& other);
    virtual Hello *dup() const override {return new Hello(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getGateIndexFrom() const;
    virtual void setGateIndexFrom(int gateIndexFrom);

    virtual void setGateIndexArraySize(size_t size);
    virtual size_t getGateIndexArraySize() const;
    virtual int getGateIndex(size_t k) const;
    virtual void setGateIndex(size_t k, int gateIndex);
    virtual void insertGateIndex(size_t k, int gateIndex);
    [[deprecated]] void insertGateIndex(int gateIndex) {appendGateIndex(gateIndex);}
    virtual void appendGateIndex(int gateIndex);
    virtual void eraseGateIndex(size_t k);

    virtual void setNeighboursArraySize(size_t size);
    virtual size_t getNeighboursArraySize() const;
    virtual int getNeighbours(size_t k) const;
    virtual void setNeighbours(size_t k, int neighbours);
    virtual void insertNeighbours(size_t k, int neighbours);
    [[deprecated]] void insertNeighbours(int neighbours) {appendNeighbours(neighbours);}
    virtual void appendNeighbours(int neighbours);
    virtual void eraseNeighbours(size_t k);

    virtual int getNeighName() const;
    virtual void setNeighName(int neighName);

    virtual int getCountRound() const;
    virtual void setCountRound(int countRound);

    virtual int getOriginalSource() const;
    virtual void setOriginalSource(int originalSource);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Hello& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Hello& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Hello *fromAnyPtr(any_ptr ptr) { return check_and_cast<Hello*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __HELLO_M_H

